{"version":3,"file":"static/js/736.4f4f96ab.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","api/say-hello.js","pages/Step2.js","../node_modules/regenerator-runtime/runtime.js"],"sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default async function sayHello(name) {\n  const response = await fetch('/ajax-trade-in/say-hello', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    },\n    body: JSON.stringify({ name }),\n  });\n\n  const json = await response.json();\n\n  if (true === json.success) {\n    return json?.data?.message;\n  }\n\n  throw new Error('Failed to say hello.');\n}\n","import { useState } from 'react';\nimport sayHello from '../api/say-hello';\n\nfunction Step2() {\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n    setMessage('');\n    let message = await sayHello(name);\n    setMessage(message);\n  }\n\n  function handleNameChange(evt) {\n    let { value } = evt.target;\n    setName(value);\n  }\n\n  return (\n    <div className=\"Step2\">\n      <h1>Step 2</h1>\n      <p>This is the second step. Here you can say hello!</p>\n\n      {message && <div className=\"alert alert-success\">{message}</div>}\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">What's your name?</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            className=\"form-control\"\n            onChange={handleNameChange}\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-success\">Say Hello</button>\n      </form>\n    </div>\n  );\n}\n\nexport default Step2;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n"],"names":["module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","sayHello","name","fetch","method","headers","body","JSON","stringify","response","json","success","data","message","Error","useState","setName","setMessage","evt","preventDefault","className","onSubmit","htmlFor","id","type","onChange","target","runtime","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","defineProperty","enumerable","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","GenStateSuspendedYield","makeInvokeMethod","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","result","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","globalThis","Function"],"sourceRoot":""}